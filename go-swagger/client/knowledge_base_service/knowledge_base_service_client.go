// Code generated by go-swagger; DO NOT EDIT.

package knowledge_base_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new knowledge base service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for knowledge base service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DescribeEnumeration(params *DescribeEnumerationParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeEnumerationOK, error)

	GetAttributeSetFieldNames(params *GetAttributeSetFieldNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttributeSetFieldNamesOK, error)

	GetCodeLists(params *GetCodeListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCodeListsOK, error)

	ListAttributeSets(params *ListAttributeSetsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAttributeSetsOK, error)

	ListStandardDefectResponses(params *ListStandardDefectResponsesParams, authInfo runtime.ClientAuthInfoWriter) (*ListStandardDefectResponsesOK, error)

	ListViewFields(params *ListViewFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*ListViewFieldsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DescribeEnumeration describe enumeration API
*/
func (a *Client) DescribeEnumeration(params *DescribeEnumerationParams, authInfo runtime.ClientAuthInfoWriter) (*DescribeEnumerationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDescribeEnumerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DescribeEnumeration",
		Method:             "POST",
		PathPattern:        "/api/knowledge_base/describe_enumeration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DescribeEnumerationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DescribeEnumerationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DescribeEnumeration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAttributeSetFieldNames get attribute set field names API
*/
func (a *Client) GetAttributeSetFieldNames(params *GetAttributeSetFieldNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAttributeSetFieldNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAttributeSetFieldNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAttributeSetFieldNames",
		Method:             "POST",
		PathPattern:        "/api/knowledge_base/list_field_names_for_attribute_set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAttributeSetFieldNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAttributeSetFieldNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAttributeSetFieldNames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCodeLists get code lists API
*/
func (a *Client) GetCodeLists(params *GetCodeListsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCodeListsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCodeListsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCodeLists",
		Method:             "POST",
		PathPattern:        "/api/knowledge_base/list_code_lists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCodeListsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCodeListsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCodeLists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAttributeSets list attribute sets API
*/
func (a *Client) ListAttributeSets(params *ListAttributeSetsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAttributeSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAttributeSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAttributeSets",
		Method:             "POST",
		PathPattern:        "/api/knowledge_base/list_attribute_sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAttributeSetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAttributeSetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListAttributeSets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListStandardDefectResponses list standard defect responses API
*/
func (a *Client) ListStandardDefectResponses(params *ListStandardDefectResponsesParams, authInfo runtime.ClientAuthInfoWriter) (*ListStandardDefectResponsesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStandardDefectResponsesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStandardDefectResponses",
		Method:             "POST",
		PathPattern:        "/api/knowledge_base/list_standard_defect_responses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStandardDefectResponsesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStandardDefectResponsesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListStandardDefectResponses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListViewFields list view fields API
*/
func (a *Client) ListViewFields(params *ListViewFieldsParams, authInfo runtime.ClientAuthInfoWriter) (*ListViewFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListViewFieldsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListViewFields",
		Method:             "POST",
		PathPattern:        "/api/knowledge_base/list_view_fields_for_context",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListViewFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListViewFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListViewFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
