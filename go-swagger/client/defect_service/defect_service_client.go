// Code generated by go-swagger; DO NOT EDIT.

package defect_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new defect service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for defect service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CalculateDefectResponseDate(params *CalculateDefectResponseDateParams) (*CalculateDefectResponseDateOK, error)

	CreateActionForDefect(params *CreateActionForDefectParams) (*CreateActionForDefectOK, error)

	DeleteDefect(params *DeleteDefectParams) (*DeleteDefectOK, error)

	GetDefect(params *GetDefectParams) (*GetDefectOK, error)

	UpdateDefect(params *UpdateDefectParams) (*UpdateDefectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CalculateDefectResponseDate calculate defect response date API
*/
func (a *Client) CalculateDefectResponseDate(params *CalculateDefectResponseDateParams) (*CalculateDefectResponseDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalculateDefectResponseDateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalculateDefectResponseDate",
		Method:             "POST",
		PathPattern:        "/api/defects/calculate_defect_response_date",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CalculateDefectResponseDateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalculateDefectResponseDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CalculateDefectResponseDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateActionForDefect create action for defect API
*/
func (a *Client) CreateActionForDefect(params *CreateActionForDefectParams) (*CreateActionForDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActionForDefectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateActionForDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/create_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateActionForDefectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActionForDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateActionForDefect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDefect delete defect API
*/
func (a *Client) DeleteDefect(params *DeleteDefectParams) (*DeleteDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDefectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/delete_defect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDefectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDefect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDefect get defect API
*/
func (a *Client) GetDefect(params *GetDefectParams) (*GetDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDefect",
		Method:             "GET",
		PathPattern:        "/api/defects/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDefectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDefect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDefect update defect API
*/
func (a *Client) UpdateDefect(params *UpdateDefectParams) (*UpdateDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDefectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/update_defect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDefectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateDefect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
