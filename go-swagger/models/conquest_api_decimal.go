// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIDecimal Decimal maintains precision by dividing the numerator by the signPow
//
// Examples:
// - For the value '0'
//        numerator = 0
//        signPow = 0
// - For the value '1'
//        numerator = 1
//        signPow = 1
// - For the value '-1'
//        numerator = 1
//        signPow = -1
// - For the value '10'
//        numerator = 10
//        signPow = 1
// - For the value '0.1'
//        numerator = 1
//        signPow = 2
// - For the value '-10.50'
//        numerator = abs(10.50) * pow(10, 2+1)   // 2+1 is 'scale + 1'
//        signPow = -(2+1)                        // 2+1 is 'scale + 1'
//
// In C#, this is converted to Decimal
//
// swagger:model conquest_apiDecimal
type ConquestAPIDecimal struct {

	// numerator is a positive 64bit integer
	//
	// In C#, this is equivalent to the 'lo', 'mid', 'hi' parts of the Decimal type
	Numerator string `json:"numerator,omitempty"`

	// signPow is the sign and a power of 10.
	//
	// If signPow is zero, the decimal is zero
	// If signPow is -ve, the decimal is -ve
	//
	// In C#, this is the equivalent to 'isNegative * scale' for the Decimal type
	SignPow int32 `json:"signPow,omitempty"`
}

// Validate validates this conquest api decimal
func (m *ConquestAPIDecimal) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIDecimal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIDecimal) UnmarshalBinary(b []byte) error {
	var res ConquestAPIDecimal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
