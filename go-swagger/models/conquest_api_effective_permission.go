// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIEffectivePermission conquest api effective permission
//
// swagger:model conquest_apiEffectivePermission
type ConquestAPIEffectivePermission struct {

	// account ID
	AccountID *ConquestAPIAccountID `json:"AccountID,omitempty"`

	// effective permission
	EffectivePermission ConquestAPIPermission `json:"EffectivePermission,omitempty"`

	// facility permission
	FacilityPermission *ConquestAPIFacilityPermission `json:"FacilityPermission,omitempty"`

	// object key
	ObjectKey *ConquestAPIObjectKey `json:"ObjectKey,omitempty"`

	// object permisions
	ObjectPermisions []*ConquestAPIObjectPermission `json:"ObjectPermisions"`

	// type permisions
	TypePermisions []*ConquestAPITypePermission `json:"TypePermisions"`
}

// Validate validates this conquest api effective permission
func (m *ConquestAPIEffectivePermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectivePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacilityPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectPermisions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypePermisions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIEffectivePermission) validateAccountID(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if m.AccountID != nil {
		if err := m.AccountID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AccountID")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIEffectivePermission) validateEffectivePermission(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectivePermission) { // not required
		return nil
	}

	if err := m.EffectivePermission.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EffectivePermission")
		}
		return err
	}

	return nil
}

func (m *ConquestAPIEffectivePermission) validateFacilityPermission(formats strfmt.Registry) error {

	if swag.IsZero(m.FacilityPermission) { // not required
		return nil
	}

	if m.FacilityPermission != nil {
		if err := m.FacilityPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FacilityPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIEffectivePermission) validateObjectKey(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectKey) { // not required
		return nil
	}

	if m.ObjectKey != nil {
		if err := m.ObjectKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIEffectivePermission) validateObjectPermisions(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectPermisions) { // not required
		return nil
	}

	for i := 0; i < len(m.ObjectPermisions); i++ {
		if swag.IsZero(m.ObjectPermisions[i]) { // not required
			continue
		}

		if m.ObjectPermisions[i] != nil {
			if err := m.ObjectPermisions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ObjectPermisions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIEffectivePermission) validateTypePermisions(formats strfmt.Registry) error {

	if swag.IsZero(m.TypePermisions) { // not required
		return nil
	}

	for i := 0; i < len(m.TypePermisions); i++ {
		if swag.IsZero(m.TypePermisions[i]) { // not required
			continue
		}

		if m.TypePermisions[i] != nil {
			if err := m.TypePermisions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TypePermisions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIEffectivePermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIEffectivePermission) UnmarshalBinary(b []byte) error {
	var res ConquestAPIEffectivePermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
